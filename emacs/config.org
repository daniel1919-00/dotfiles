#+Title: GNU Emacs Config
#+Author: Daniel
#+DESCRIPTION: Personal emacs config
#+STARTUP: showeverything
#+OPTIONS: toc: 2

* TABLE OF CONTENTS :TOC:
- [[#general][General]]
  - [[#setup][Setup]]
  - [[#fonts][Fonts]]
  - [[#eshell][Eshell]]
- [[#packages][Packages]]
  - [[#setup-1][Setup]]
  - [[#org-mode][Org mode]]
  - [[#which-key][Which key]]
  - [[#appearance][Appearance]]
  - [[#dired][Dired]]
  - [[#all-the-icons][All the icons]]
  - [[#ivy][Ivy]]
  - [[#projectile][Projectile]]
  - [[#dashboard][Dashboard]]
  - [[#flycheck][Flycheck]]
  - [[#magit][Magit]]
  - [[#lsp][LSP]]
  - [[#language-servers][Language servers]]
  - [[#autocompletion][Autocompletion]]
- [[#keybindings][Keybindings]]

* General

** Setup
#+begin_src emacs-lisp
    (setq-default inhibit-startup-message t
                  tab-width 4
                  indent-tabs-mode nil
                  compilation-scroll-output t)

    (setq make-backup-files nil) ; stop creating ~ files

    (setq auto-save-list-file-prefix "~/.emacs.d/autosave/")

    (setq auto-save-file-name-transforms
          '((".*" "~/.emacs.d/autosave/" t)))

    (setq vc-follow-symlinks t)
    (setq ad-redefinition-action 'accept)

    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (scroll-bar-mode -1)
    (global-display-line-numbers-mode)
    (global-visual-line-mode t)
    (cua-mode t)
    (require 'org-tempo)
    (setq visible-bell t)
    (set-default-coding-systems 'utf-8)
    (setq large-file-warning-threshold nil)
    (setq xref-search-program 'ripgrep
        grep-command "rg -nS --noheading")

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                    treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  (column-number-mode)
  (org-indent-mode)
  (variable-pitch-mode 1)
#+end_src

** Fonts
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Monaspace Neon 16"))
#+end_src

** Eshell
#+begin_src emacs-lisp
  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t)
#+end_src


* Packages

** Setup
Add MELPA and setup general configs.

https://melpa.org/#/getting-started

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

** Org mode
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))
#+end_src

** Which key
#+begin_src emacs-lisp
  (use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+end_src

** Appearance
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (nerd-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

** Dired
#+begin_src emacs-lisp
  (use-package dired-ranger)

  (defun dw/dired-mode-hook ()
    (interactive)
    (dired-hide-details-mode 1)
    (unless (string-equal "/gnu/store/" (expand-file-name default-directory))
      (all-the-icons-dired-mode 1))
    (hl-line-mode 1))

  (use-package dired
    :ensure nil
    :bind (:map dired-mode-map
                ("b" . dired-up-directory)
                ("H" . dired-hide-details-mode))
    :config
    (setq dired-listing-switches "-agho --group-directories-first"
          dired-omit-files "^\\.[^.].*"
          dired-omit-verbose nil
          dired-dwim-target 'dired-dwim-target-next
          dired-hide-details-hide-symlink-targets nil
          dired-kill-when-opening-new-dired-buffer t
          delete-by-moving-to-trash t)

    (add-hook 'dired-mode-hook #'dw/dired-mode-hook))
#+end_src


** All the icons
https://github.com/domtronn/all-the-icons.el

#+begin_src emacs-lisp
  (use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Ivy
Ivy, a generic completion mechanism for Emacs.
https://github.com/abo-abo/swiper

#+begin_src emacs-lisp
    (use-package counsel
    :after ivy
    :config (counsel-mode))

  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))
#+end_src

** Projectile
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.

#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode 1)) 
#+end_src

** Dashboard
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp
  (use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :diminish
    :init (global-flycheck-mode))

  (with-eval-after-load 'rust-mode
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** LSP
#+begin_src emacs-lisp
(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . efs/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

(use-package lsp-treemacs
  :after lsp)

(use-package lsp-ivy)
#+end_src

** Language servers
#+begin_src emacs-lisp

#+end_src

** Autocompletion
#+begin_src emacs-lisp
    (use-package company
      :after lsp-mode
      :hook (lsp-mode . company-mode)
      :bind (:map company-active-map
             ("<tab>" . company-complete-selection))
            (:map lsp-mode-map
             ("<tab>" . company-indent-or-complete-common))
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.0))


  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src


* Keybindings

#+begin_src emacs-lisp
  (global-set-key [?\C-z] 'undo)
  (global-set-key [?\C-\S-z] 'undo-redo)
  (global-set-key [?\C-d] 'duplicate-line)
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src
